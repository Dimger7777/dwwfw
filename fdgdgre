import sys
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QColor, QLinearGradient, QPainter, QFont
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QLabel
import pygetwindow as gw
import time
import keyboard  # Импортируем библиотеку keyboard

class OverlayWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setGeometry(0, 0, 500, 500)
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        
        self.initUI()

        self.is_running = False
        self.start_time = None

    def initUI(self):
        gradient = QLinearGradient(0, 0, 0, 1080)
        color_blue = QColor(Qt.blue)
        color_blue.setAlpha(200)
        gradient.setColorAt(0, color_blue)

        color_magenta = QColor(Qt.magenta)
        color_magenta.setAlpha(200)
        gradient.setColorAt(1, color_magenta)    

        self.background_gradient = gradient

        central_widget = QWidget(self)
        self.setCentralWidget(central_widget)

        layout = QVBoxLayout(central_widget)
        layout.addStretch(1)

        self.label_seconds = QLabel("0", self)
        font = QFont("Arial", 48)  # Измените размер шрифта по своему вкусу
        self.label_seconds.setFont(font)
        layout.addWidget(self.label_seconds)

        # Отслеживание движения мыши
        self.setMouseTracking(True)
        # Установка пустого курсора
        self.setCursor(Qt.BlankCursor)

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        painter.setRenderHint(QPainter.SmoothPixmapTransform)
        painter.fillRect(self.rect(), self.background_gradient)

    def check_game_fullscreen(self):
        if keyboard.is_pressed('F4'):
            self.showNormal()
            self.show()  # Убедиться, что окно видимо после возврата из полноэкранного режима
        if keyboard.is_pressed('F8'):
            self.hide()

        game_window = gw.getWindowsWithTitle('RАGЕ Multiрlayer')
        game_window_1 = gw.getWindowsWithTitle('RАGЕ Мultiplayer ')
        game_window_2 = gw.getWindowsWithTitle('RAGЕ Multiрlауеr  ')
        game_window_3 = gw.getWindowsWithTitle('RAGЕ Multiрlауеr   ')
        game_window_4 = gw.getWindowsWithTitle('RAGЕ Multiрlауеr    ')
        if (game_window and game_window[0].isActive) or (game_window_1 and game_window_1[0].isActive) or (game_window_2 and game_window_2[0].isActive) or (game_window_3 and game_window_3[0].isActive) or (game_window_4 and game_window_4[0].isActive):
            self.show()
        else:
            self.hide()
        # Запустим секундомер автоматически
        if not self.is_running:
            self.is_running = True
            self.start_time = time.time() - self.elapsed_time()
            self.update_display()

        # Убедимся, что курсор остается скрытым
        self.setCursor(Qt.BlankCursor)

    def elapsed_time(self):
        if self.start_time is None:
            return 0
        return time.time() - self.start_time

    def update_display(self):
        if self.is_running:
            elapsed_time = self.elapsed_time()
            self.label_seconds.setText(str(round(elapsed_time)))
            QTimer.singleShot(100, self.update_display)

    def reset(self, event=None):  # Добавляем параметр event
        self.is_running = False
        self.start_time = None
        self.label_seconds.setText("0")

if __name__ == "__main__":
    windows = gw.getAllTitles()
    print(windows)
    app = QApplication(sys.argv)
    overlay = OverlayWindow()

    fullscreen_timer = QTimer()
    fullscreen_timer.timeout.connect(overlay.check_game_fullscreen)
    fullscreen_timer.start(1000)  # Проверка каждую секунду

    # Добавим обработку нажатия клавиши K
    keyboard.on_press_key('k', overlay.reset)

    sys.exit(app.exec_())
